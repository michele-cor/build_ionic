name: publish-apps

on: workflow_dispatch

#Secrets
#${{ secrets.ANDROID_BUILD_CERTIFICATE_BASE64 }}
#${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}
#${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}
#${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
#${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#${{ secrets.P12_PASSWORD }}
#${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#${{ secrets.KEYCHAIN_PASSWORD }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # this makes the checkout action fetch the complete history

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'
 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install capacitor-set-version
        run: npm install -D capacitor-set-version  

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true
          configFilePath: 'build/GitVersion.yml'

      #  compute unique integer build code for android as "NOW(unix ts seconds) - 2024-05-01:00:00:00 UTC"
      - name: Compute Android Integer Build Code
        run: echo "BUILD_INT_VERSION_CODE=$(( $(date +%s) - 1714514400 ))" >> $GITHUB_ENV

      - name: Echo Version Number
        run: |
          echo "Version number is: ${{ steps.gitversion.outputs.majorMinorPatch }} and Android integer version code ${{ env.BUILD_INT_VERSION_CODE }}"

      - name: Set up Git user
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "Github Action [bot]"

      - name: Create and Push Tag
        continue-on-error: true
        run: |
          git tag v${{ steps.gitversion.outputs.majorMinorPatch }}
          git push origin --tags

      - name: Update package.json version
        run: |
          npm version $version --no-git-tag-version

      - name: Set Android app version code
        run: |
          npx capacitor-set-version set:android -v ${{ steps.gitversion.outputs.majorMinorPatch }} -b ${{ env.BUILD_INT_VERSION_CODE }}

      - name: Set iOS app version number
        run: |
          npx capacitor-set-version set:ios -v ${{ steps.gitversion.outputs.majorMinorPatch }} -b ${{ env.BUILD_INT_VERSION_CODE }}

      - name: Remove node_modules
        run: |
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +

      - name: Archive code
        run: |
          mkdir build-stage
          rsync -a --exclude=build-stage . build-stage/
          tar -czf source-code.tar.gz build-stage/

      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: prepared-code
          path: source-code.tar.gz

  android:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: prepared-code
      
      - name: Extract code
        run: tar -xzf source-code.tar.gz --strip-components=1 -C . build-stage/
        
      - name: Decode keystore file from base64
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.ANDROID_BUILD_CERTIFICATE_BASE64 }}
          BUILD_KEYSTORE_NAME: android-app-build.keystore
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/$BUILD_KEYSTORE_NAME
  
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
      - name: Setup Keystore settings in gradle.properties
        env:
          RELEASE_STORE_FILE_PROPERTY_NAME: RELEASE_STORE_FILE
          RELEASE_STORE_PASSWORD_PROPERTY_NAME: RELEASE_STORE_PASSWORD
          RELEASE_KEY_ALIAS_PROPERTY_NAME: RELEASE_KEY_ALIAS
          RELEASE_KEY_PASSWORD_PROPERTY_NAME: RELEASE_KEY_PASSWORD
          GRADLE_FILE_PATH: android/gradle.properties
          BUILD_KEYSTORE_NAME: android-app-build.keystore
        run: |
          # --------------------------
          # Upsert Property RELEASE_STORE_FILE
          if grep -q "^$RELEASE_STORE_FILE_PROPERTY_NAME=" "$GRADLE_FILE_PATH"; then
              # Property found, so replace it
              sed -i "s/^$RELEASE_STORE_FILE_PROPERTY_NAME=.*/$RELEASE_STORE_FILE_PROPERTY_NAME=$RUNNER_TEMP/$BUILD_KEYSTORE_NAME/" "$GRADLE_FILE_PATH"
          else
              # Property not found, so add it
              echo "$RELEASE_STORE_FILE_PROPERTY_NAME=$RUNNER_TEMP/$BUILD_KEYSTORE_NAME" >> "$GRADLE_FILE_PATH"
          fi
          # --------------------------
          # Upsert Property RELEASE_STORE_PASSWORD
          if grep -q "^$RELEASE_STORE_PASSWORD_PROPERTY_NAME=" "$GRADLE_FILE_PATH"; then
              # Property found, so replace it
              sed -i "s/^$RELEASE_STORE_PASSWORD_PROPERTY_NAME=.*/$RELEASE_STORE_PASSWORD_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}/" "$GRADLE_FILE_PATH"
          else
              # Property not found, so add it
              echo "$RELEASE_STORE_PASSWORD_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}" >> "$GRADLE_FILE_PATH"
          fi
          # --------------------------
          # Upsert Property RELEASE_KEY_ALIAS
          if grep -q "^$RELEASE_KEY_ALIAS_PROPERTY_NAME=" "$GRADLE_FILE_PATH"; then
              # Property found, so replace it
              sed -i "s/^$RELEASE_KEY_ALIAS_PROPERTY_NAME=.*/$RELEASE_KEY_ALIAS_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}/" "$GRADLE_FILE_PATH"
          else
              # Property not found, so add it
              echo "$RELEASE_KEY_ALIAS_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}" >> "$GRADLE_FILE_PATH"
          fi
          # --------------------------
          # Upsert Property RELEASE_KEY_PASSWORD
          if grep -q "^$RELEASE_KEY_PASSWORD_PROPERTY_NAME=" "$GRADLE_FILE_PATH"; then
              # Property found, so replace it
              sed -i "s/^$RELEASE_KEY_PASSWORD_PROPERTY_NAME=.*/$RELEASE_KEY_PASSWORD_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}/" "$GRADLE_FILE_PATH"
          else
              # Property not found, so add it
              echo "$RELEASE_KEY_PASSWORD_PROPERTY_NAME=${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}" >> "$GRADLE_FILE_PATH"
          fi
          cat $GRADLE_FILE_PATH
        # actual build from here on
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install app dependencies
        run: npm install
      - name: Install Ionic
        run: npm install -g @ionic/cli
      - name: Build
        run: npm run build
      - name: Cap sync
        run: npx cap sync
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
            java-version: '21'
            distribution: 'oracle'
      - name: Publish app
        run: |
          cd android
          ./gradlew assembleRelease
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-android
          path: ./android/app/build/outputs/apk/release/app-release.apk

  ios:
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: prepared-code

      - name: Extract code
        run: tar -xzf source-code.tar.gz --strip-components=1 -C . build-stage/

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
  
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
  
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Set up XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install app dependencies
        run: npm install
      - name: Install Ionic
        run: npm install -g @ionic/cli
      - name: Build
        run: npm run build
      - name: Cap sync
        run: npx cap sync
      - name: Build project
        run: xcodebuild -workspace './ios/App/App.xcworkspace' -scheme App -destination generic/platform=iOS -archivePath App.xcarchive archive
      - name: üçª Assemble IPA
        run: xcodebuild archive -archivePath App.xcarchive -exportArchive -exportOptionsPlist ./ios/exportArchive.plist -exportPath output -allowProvisioningUpdates
      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-ios
          path: output/
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
